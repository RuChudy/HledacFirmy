@page "/"
@using System.Globalization
@using HledacFirmy.Ares.Services
@using HledacFirmy.Blazor.Components.Hledac
@using HledacFirmy.Hledac
@using Volo.Abp.Timing
@inherits HledacFirmyComponentBase
@inject IHledacAppService Service

<div class="row mb-3">
    <div class="col-xl-6 col-12 d-flex">
        <div class="card w-100 overflow-hidden">
            <div class="card-body">
                <div class="starting-content pe-5">
                    <h3>@L["Welcome"]</h3>
                    <p class="lead text-muted mb-2">@L["LongWelcomeMessage"]</p>
                    @if (!CurrentUser.IsAuthenticated)
                    {
                        <a @onclick="Login" class="btn btn-primary mb-4"><i class="fa-solid fa-right-to-bracket me-1"></i><span>@L["Login"]</span></a>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-md-12 d-flex">
        <div class="card w-100 overflow-hidden">
            <div class="card-body">
                <h3>@L["SearchByIc"]</h3>
                @if (IsSearching)
                {
                    <p class="text-muted mb-2">@L["Searching"]</p>
                }
                else
                {
                    <p class="text-muted mb-2">@L["FillIc"] <input @bind="@SearchValue" type="text" id="ic" name="ic" required minlength="4" maxlength="8" size="10" /></p>
                    <a class="btn btn-primary mb-3" @onclick="OnSearchIc">@L["SearchCompany"]</a>
                }
            </div>
        </div>
    </div>
</div>
<div class="row mb-3">
    <div class="col-xl-12 col-12 d-flex">
        <div class="card w-100">
            <div class="card-body">
                <CascadingValue Value="@LastSearchTime" Name="LastSearchTime">
                    <SubjektComponent />
                </CascadingValue>
            </div>
        </div>
    </div>
</div>

@code {
    public DateTime? LastSearchTime { get; set; }

    private bool IsSearching { get; set; } = false;

    private string SearchValue { get; set; } = string.Empty;

    /// <summary>
    /// Reakce na tlacitko Hledat Ic.
    /// </summary>
    private async Task OnSearchIc()
    {
        IsSearching = true;
        StateHasChanged();
        try
        {
            if (!long.TryParse(SearchValue, NumberStyles.Integer, CultureInfo.CurrentCulture, out long ico) || ico < HledacFirmyConsts.IcoMin || ico > HledacFirmyConsts.IcoMax)
            {
                await Message.Error($"Hodnota '{SearchValue}' není IČO.", L["Error"]);
                return;
            }

            HledacVysledekDto data = await Service.PostFindAndUpdateIc(ico);
            ArgumentNullException.ThrowIfNull(data);

            if (data.Vysledek == HledacVysledekEnum.Nenalezeno)
            {
                await Message.Warn($"IČ '{SearchValue}' nebylo nalezeno.", L["NotFound"]);
                return;
            }

            LastSearchTime = Clock.Now;

            await Message.Success($"Nalezeno: {data.Subjekt?.ObchJmeno}", L["Found"]);
        }
        catch (Exception ex)
        {
            await Message.Error(ex.Message, L["Error"]);
        }
        finally
        {
            IsSearching = false;
        }
    }
}
